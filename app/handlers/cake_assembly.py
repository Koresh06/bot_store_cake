import datetime
from app.utils.order_receipt import create_assembly_pdf, create_order_pdf
import config
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from app.FSM.fsm import Collecting_the_cake
from app.requests.cake_assemly_requests import collecting_cake

from app.keyboards.reply_rb import user_menu_kb
from app.keyboards.inline_kb import new_user, generate_calendar_markup

cake = Router()

@cake.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!'
    )

@cake.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ'
    )
    await state.clear()

@cake.message(F.text.endswith('–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π —Ç–æ—Ä—Ç'), StateFilter(default_state))
async def cake_collection(message: Message, state: FSMContext):
    await message.answer('–ú–∞–≥–∞–∑–∏–Ω <b>"–í–ö–£–°–ù–´–ï –¢–û–†–¢–´"</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥—É –ø–æ —Å–æ–±–æ—Ä—É —Å–≤–æ–µ–≥–æ —Ç–æ—Ä—Ç–∞\n\n–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥—É–º–∞–Ω–Ω–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ—Ä—Ç\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Collecting_the_cake.event)

@cake.message(StateFilter(Collecting_the_cake.event))
async def process_event(message: Message, state: FSMContext):
    await state.update_data(event=message.text)
    await message.answer('–î–∞–ª–µ–µ –Ω–∞–º –æ—Ç –í–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞, –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n\n–í–µ—Å (–≤ –∫–≥.) -\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π (1, 2 ...) -\n–§–æ—Ä–º—ã –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è (–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –∫—Ä—É–≥, —Å–µ—Ä–¥—Ü–µ, <i>–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç</i>) -\n–¶–≤–µ—Ç –≥–ª–∞–∑—É—Ä–∏ -\n–ù–∞—á–∏–Ω–∫–∞ (–±–∏—Å–∫–≤–∏—Ç –∏ —Ç.–¥.) -\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ —Ç–æ—Ä—Ç–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±—ã–µ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Collecting_the_cake.description)

@cake.message(StateFilter(Collecting_the_cake.description))
async def process_descriphion(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ üì∑ —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º\n\n–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ - /skip\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Collecting_the_cake.image)

@cake.message(Command(commands='skip'))
async def process_skip(message: Message, state: FSMContext):
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "/skip", –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await state.update_data(image=None)
        now = datetime.datetime.now()
        current_year = now.year
        current_month = now.month
        current_date = now.date()
        await state.set_state(Collecting_the_cake.data)
        await message.answer("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞.", reply_markup=await generate_calendar_markup (current_year, current_month, current_date))  

@cake.message(StateFilter(Collecting_the_cake.image) or Command(commands='skip'))
async def process_image(message: Message, state: FSMContext):  
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.update_data(image=message.photo[-1].file_id)
        now = datetime.datetime.now()
        current_year = now.year
        current_month = now.month
        current_date = now.date()
        await state.set_state(Collecting_the_cake.data)
        await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞.", reply_markup=await generate_calendar_markup (current_year, current_month, current_date))
     

@cake.callback_query(F.data.startswith('calendar'))
async def process_calendar_callback(callback: CallbackQuery):
    _, year, month = callback.data.split("_")
    if 0 < int(month) < 13:
        current_date = datetime.datetime.now().date()
        markup = await generate_calendar_markup(int(year), int(month), current_date)

        await callback.bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        reply_markup=markup)
    else:
        await callback.answer('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞!')


@cake.callback_query(F.data.startswith('day'), StateFilter(Collecting_the_cake.data))
async def process_day_callback(callback: CallbackQuery, state: FSMContext):
    day = callback.data.split('_')[0][-1] 
    day_day = callback.data.split('_')[-1] 
    if day != 'üîí' and day_day != ' ':
        _, year, month, day = callback.data.split("_")
        selected_date = f"{day}.{month}.{year}"
        await state.update_data({'data':selected_date})
        await callback.answer(f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {selected_date}. –°–ø–∞—Å–∏–±–æ!', show_alert=True)
        await callback.message.delete()
        total = await state.get_data()


        if await collecting_cake(total, callback.from_user.id):
            if not total["image"] == None:
                await callback.message.answer_photo(total['image'], caption=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {total['event']}   \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {total['description']}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {total['data']}")
                await callback.message.bot.send_photo(chat_id=config.ADMIN_ID, photo=total['image'], caption=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b>   {total['event']}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {total['description']}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {total['data']}",        reply_markup=await new_user(callback.from_user.id, callback.from_user.first_name))
            else:
                await callback.message.answer(f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {total['event']}   \n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {total['description']}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {total['data']}")
                await callback.message.bot.send_message(chat_id=config.ADMIN_ID, text=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b>   {total['event']}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {total['description']}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {total['data']}",        reply_markup=await new_user(callback.from_user.id, callback.from_user.first_name))
            await state.clear()
            await callback.message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫—É üíµ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',        reply_markup=await user_menu_kb())
            pdf_file = await create_assembly_pdf(callback.from_user.first_name, total)
            await callback.bot.send_document(chat_id=config.ADMIN_ID, document=BufferedInputFile(pdf_file, filename=f"–°–±–æ—Ä–∫–∞_{callback.from_user.first_name}.pdf"))
        else:
            await callback.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞', reply_markup=await user_menu_kb())
            await state.clear()
    else:
        await callback.answer('–î–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å')


