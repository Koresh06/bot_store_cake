from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from app.middlewares.middleware import Is_Admin
from app.FSM.fsm import Add_categories ,Update_product
from app.filters.filter import IsDigitFilter, CheckImageFilter
from app.requests.admin_requests import (
    output_categories,
    add_categories,
    add_product_db,
    delete_orders,
    users,
    get_info_admin_order,
    readiness_order,
    get_inform_assembly_admin,
    readiness_sborka,
    delete_sborka,
    admin_history_get_inform_order,
    admin_history_get_inform_assembly
)
from app.keyboards.inline_kb import (
    non_categor,
    categories,
    users_inline_buttons,
    admin_order,
    admin_catalog_order_nomer,
    user_order_availability,
    admin_catalog_sborka_nomer,
    user_sborka_availability,
    admin_subcategories_stories,
    admin_cancellation_history
)
from app.keyboards.reply_rb import admin_menu_kb
from app.requests.order_placement_requests import retrieve_data
from app.utils.order_receipt import create_order_pdf
from config import ADMIN_ID


admin = Router()

admin.message.middleware(Is_Admin())

@admin.message(Command('admin'), StateFilter(default_state))
async def cmd_admin(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç —Ö–æ–∑—è–∏–Ω', reply_markup=await admin_menu_kb())

@admin.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='üö´ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ'
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()

@admin.message(F.text.endswith('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'))
async def cmd_add_product(message: Message):
    if await output_categories():
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await categories())
    else:
        await message.answer('–ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ‚¨áÔ∏è', reply_markup=non_categor)

@admin.callback_query(F.data == 'add_categor', StateFilter(default_state))
async def but_add_categ(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Add_categories.name)
    await callback.answer()

@admin.message(StateFilter(Add_categories.name))
async def cmd_categ_name(message: Message, state: FSMContext):
    data = await state.update_data(name=message.text)
    if await add_categories(data['name']):
        await message.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
        await state.clear()
    else:
        await message.answer('üö´ –î–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=await admin_menu_kb())
        await state.clear()

@admin.callback_query(F.data.startswith('categ_'), StateFilter(default_state))
async def product_categ(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üç∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.name)
    await state.update_data(id_categ=int(callback.data[-1]))
    await callback.answer()

@admin.message(StateFilter(Update_product.name))
async def cmd_name_product(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.image)

@admin.message(StateFilter(Update_product.image), CheckImageFilter())
async def cmd_image_product(message: Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.answer('üîñ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.description)

@admin.message(StateFilter(Update_product.description))
async def cmd_description_product(messsage: Message, state: FSMContext):
    await state.update_data(description=messsage.text)
    await messsage.answer('üíµ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–π—Å/—Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Update_product.price)

@admin.message(StateFilter(Update_product.price), IsDigitFilter())
async def cmd_price_product(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    product = await state.get_data()
    await message.answer_photo(product['image'])
    await message.answer(f"üç∞ <b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {product['name']}\n\nüîñ <b><i>–°–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞:</i></b> {product['description']}\n\nüíµ <b><i>–ü—Ä–∞–π—Å:</i></b> {product['price']} RUB")
    if await add_product_db(message.from_user.id, product):
        await message.answer('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await admin_menu_kb())
        await state.clear()
    else:
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        await state.clear()

@admin.callback_query(F.data.startswith('readiness'))
async def readiness_cmd(callback: CallbackQuery):
    index = int(callback.data.split('_')[-2])
    tg_id = int(callback.data.split('_')[-1])
    order = await retrieve_data(index)
    pdf_file = await create_order_pdf(callback.from_user.first_name, order)
    await callback.bot.send_document(chat_id=ADMIN_ID, document=BufferedInputFile(pdf_file, filename=f"–ó–∞–∫–∞–∑_{index}.pdf"))
    await callback.bot.send_message(chat_id=tg_id, text=f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ {index}')
    await callback.message.delete()
    await callback.answer()

@admin.callback_query(F.data.startswith('sborka_otmena'))
@admin.callback_query(F.data.startswith('order_otmena'))
@admin.callback_query(F.data.startswith('del_'))
async def delete_order_cmd(callback: CallbackQuery):
    index = int(callback.data.split('_')[-2])
    tg_id = int(callback.data.split('_')[-1])
    if callback.data.split('_')[0] == 'sborka':
        await delete_sborka(index)
        await callback.message.delete()
        await callback.answer('–°–±–æ—Ä–∫–∞ –æ–∫–ª–æ–Ω–µ–Ω–∞!')
        await callback.message.bot.send_message(chat_id=tg_id, text=f'–í–∞—à–∞ —Å–±–æ—Ä–∫–∞ ‚Ññ {index} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    else:
        await delete_orders(index)
        await callback.message.delete()
        await callback.answer('–ó–∞–∫–∞–∑ –æ–∫–ª–æ–Ω–µ–Ω!')
        await callback.message.bot.send_message(chat_id=tg_id, text=f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {index} –æ—Ç–∫–ª–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    if callback.data.split('_')[0] == 'order' or 'sborka':
        await callback.message.answer('–ó–∞–∫–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ->', reply_markup=await admin_order())


@admin.message(F.text.endswith('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
async def settings_admin(message: Message):
    if await users():
        await message.answer(text='üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=await users_inline_buttons())
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')

@admin.message(F.text.endswith('–ó–∞–∫–∞–∑—ã'))
async def process_admin_order(message: Message):
    await message.answer('–ó–∞–∫–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ->', reply_markup=await admin_order())

@admin.callback_query(F.data == 'order_catalog_admin')
async def process_catalog_orders_users(callback: CallbackQuery):
    await callback.message.edit_text('–ó–∞–∫–∞–∑—ã –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Ä–∞–±–æ—Ç–µ', reply_markup=await admin_catalog_order_nomer())

@admin.callback_query(F.data.startswith('id'))
async def process_info_admin_cake(callback: CallbackQuery):
    tg_id = int(callback.data.split('_')[-1])
    index = int(callback.data.split('_')[-2])
    content = await get_info_admin_order(index)
    item = content[0]
    position = '\n'.join([f'{k}: {v} —à—Ç.' for k, v in item[3].items()])
    await callback.message.edit_text(f'–ó–∞–∫–∞–∑ ‚Ññ {item[0]}\n\n–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {item[1]}\n\n–ü–æ–∑–∏—Ü–∏–∏: {position}\n\n–ü—Ä–∞–π—Å: {item[4]}\n\n–û–ü–õ–ê–¢–ê: {"üí≥ –ö–∞—Ä—Ç–∞" if item[2] == "cart" else "üíµ –ù–∞–ª–∏—á–∫–∞"}', reply_markup=await user_order_availability(tg_id, index))

@admin.callback_query(F.data.startswith('order_gotov'))
async def process_order_gotov(callback: CallbackQuery):
    tg_id = int(callback.data.split('_')[-1])
    index = int(callback.data.split('_')[-2])
    if await readiness_order(index):
        await callback.message.delete()
        await callback.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ {index} –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏')
        await callback.bot.send_message(chat_id=tg_id, text=f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {index} –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω!', reply_markup=await admin_order())

@admin.callback_query(F.data == 'admin_nazad')
async def process_backward_admin(callback: CallbackQuery):
    await callback.message.edit_text('–ó–∞–∫–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ->', reply_markup=await admin_order())
        
@admin.callback_query(F.data == 'cake_collection_admin')
async def process_cake_assembly(callback: CallbackQuery):
    await callback.message.edit_text('–°–±–æ—Ä–∫–∏ —Ç–æ—Ä—Ç–æ–≤', reply_markup=await admin_catalog_sborka_nomer())

@admin.callback_query(F.data.startswith('sborka/id'))
async def process_inform_assembly(callback: CallbackQuery):
    await callback.message.delete()
    tg_id = int(callback.data.split('_')[-1])
    index = int(callback.data.split('_')[-2])
    inform_assembly = await get_inform_assembly_admin(index)
    sborka = inform_assembly[0]
    if not sborka[2] == None:
        await callback.message.answer_photo(photo=sborka[2], caption=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {sborka[1]}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {sborka[3]}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {sborka[4]}", reply_markup=await user_sborka_availability(tg_id, index))
    else:
        await callback.message.answer(f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {sborka[1]}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {sborka[3]}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {sborka[4]}", reply_markup=await user_sborka_availability(tg_id, index))

@admin.callback_query(F.data.startswith('sborka_gotov'))
async def process_sborka_gotov(callback: CallbackQuery):
    tg_id = int(callback.data.split('_')[-1])
    index = int(callback.data.split('_')[-2])
    if await readiness_sborka(index):
        await callback.message.delete()
        await callback.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ ‚Ññ {index} –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏')
        await callback.bot.send_message(chat_id=tg_id, text=f'–í–∞—à —Å–±–æ—Ä–∫–∞ ‚Ññ {index} –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∞!', reply_markup=await admin_order())

@admin.callback_query(F.data == 'sborka_admin_nazad')
async def sborka_admin_nazad(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ó–∞–∫–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ->', reply_markup=await admin_order())

@admin.callback_query(F.data == 'admin_history')
async def process_admin_history(callback: CallbackQuery):
    await callback.message.edit_text('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=await admin_subcategories_stories())

@admin.callback_query(F.data == 'admin_history_catalog')
async def process_admin_history_catalog(callback: CallbackQuery):
    await callback.message.delete()
    history = await admin_history_get_inform_order()
    for item in history:
       position = '\n'.join([f'{k}: {v} —à—Ç.' for k, v in item[3].items()])
       await callback.message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ {item[0]}\n\n–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {item[1]}\n\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {item[2]}\n\n–ü–æ–∑–∏—Ü–∏–∏: {position}\n\n–ü—Ä–∞–π—Å: {item[4]}\n\n–û–ü–õ–ê–¢–ê: {"üí≥ –ö–∞—Ä—Ç–∞" if item[2] == "cart" else "üíµ –ù–∞–ª–∏—á–∫–∞"}')
    await callback.message.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º!', reply_markup=admin_cancellation_history)
    
@admin.callback_query(F.data == 'admin_history_assembly')
async def process_history_assemby(callback: CallbackQuery):
    await callback.message.delete()
    history = await admin_history_get_inform_assembly()
    for sborka in history:
        if not sborka[2] == None:
            await callback.message.answer_photo(photo=sborka[2], caption=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {sborka[1]}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {sborka[3]}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {sborka[4]}")
        else:
            await callback.message.answer(f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {sborka[1]}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {sborka[3]}\n\n<b><i>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</i></b> {sborka[4]}")
    await callback.message.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ú–æ–∏–º –∑–∞–∫–∞–∑–∞–º!', reply_markup=admin_cancellation_history)