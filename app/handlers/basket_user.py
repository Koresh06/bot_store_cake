from aiogram import Router, F
from aiogram.types import Message

from app.requests.basket_user_requests import (
    check_user_cart,
    pars_product,
    delete_menu_product,
    clear_cart_pr,
)
from app.keyboards.reply_rb import (
    kb_menu_cart,
    user_menu_kb,

)


basket = Router()

@basket.message(F.text.endswith('–ö–æ—Ä–∑–∏–Ω–∞'))
async def cmd_cart(message: Message):

    items = await check_user_cart(message.from_user.id)
    if items:
        lst_menu = []
        for item in items:
            parser_product_attr = await pars_product(item[0])
            lst_menu.append(parser_product_attr)

        content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} –∫–≥. —Ö {item[0][1]} = {item [1] * item[0][1]} RUB" for item in lst_menu])
        total_cost = sum([i[1] * i[0][1] for i in lst_menu])
        name_count_product = [(item[0][0], item[1]) for item in lst_menu]

        await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await kb_menu_cart(name_count_product))
        
    else:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä', reply_markup=await user_menu_kb())

#–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@basket.message(F.text.startswith('‚ùå'))
async def cmd_delete_product(message: Message):
    name = message.text.split('.')[1]
    if await delete_menu_product(name):
        items = await check_user_cart(message.from_user.id)
        if items:
            lst_menu = []
            for item in items:
                parser_product_attr = await pars_product(item[0])
                lst_menu.append(parser_product_attr)

            content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} –∫–≥. —Ö {item[0][1]} = {item[1] * item[0][1]} RUB" for item in lst_menu])
            total_cost = sum([i[1] * i[0][1] for i in lst_menu])
            name_count_product = [(item[0][0], item[1]) for item in lst_menu]

            await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await  kb_menu_cart(name_count_product))
        else:
            await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä', reply_markup=await user_menu_kb())

@basket.message(F.text.endswith('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
async def clear_cart(message: Message):
    if await clear_cart_pr(message.from_user.id):
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞, –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—ë–¥–∏—Ç–µ –≤ üìã –ú–µ–Ω—é)', reply_markup=await user_menu_kb())
    else:
        await message.answer('–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É [ü§ù –ü–æ–º–æ—â—å]')